shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source("CleanInputString.R")
source(".\\CleanInputString.R")
source(".\\PredNextTerm.R")
getwd()
source("..\\CleanInputString.R")
load("..\\CleanData\\df_tdm_1.RData")
load("..\\CleanData\\df_tdm_2.RData")
load("..\\CleanData\\df_tdm_3.RData")
load("..\\CleanData\\df_tdm_4.RData")
source("..\\CleanInputString.R")
source("..\\PredNextTerm.R")
setwd("C:\\Users\\Lee\\Documents\\R\\10. Captstone\\FinalProjectCapstone")
suppressWarnings(library(tm))
suppressWarnings(library(stringr))
suppressWarnings(library(shiny))
load(".\\CleanData\\df_tdm_1.RData")
load(".\\CleanData\\df_tdm_2.RData")
load(".\\CleanData\\df_tdm_3.RData")
load(".\\CleanData\\df_tdm_4.RData")
source("CleanInputString.R")
source("PredNextTerm.R")
#String for testing the code
input4 <- "i am a boy"
input3 <- "thanks for the"
input2 <- "thanks for"
input1 <- "thanks"
nextWord4 <- PredNextTerm(input4);
nextWord3 <- PredNextTerm(input3);
nextWord2 <- PredNextTerm(input2);
nextWord1 <- PredNextTerm(inStr1);
nextWord4
nextWord3
nextWord2
nextWord1
# The predicted next word
nextSingleWord4 <- word(nextWord4[1,1], -1);
nextSingleWord3 <- word(nextWord3[1,1], -1);
nextSingleWord2 <- word(nextWord2[1,1], -1);
nextSingleWord1 <- word(nextWord1[1,1], -1);
nextSingleWord4
nextSingleWord3
nextSingleWord2
nextSingleWord1
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
setwd("C:\\Users\\Lee\\Documents\\R\\10. Captstone\\FinalProjectCapstone")
suppressWarnings(library(tm))
suppressWarnings(library(stringr))
suppressWarnings(library(shiny))
load(".\\CleanData\\df_tdm_1.RData")
load(".\\CleanData\\df_tdm_2.RData")
load(".\\CleanData\\df_tdm_3.RData")
load(".\\CleanData\\df_tdm_4.RData")
source("CleanInputString.R")
source("PredNextTerm.R")
#String for testing the code
input4 <- "i am a boy"
input3 <- "thanks for the"
input2 <- "thanks for"
input1 <- "thanks"
nextWord4 <- PredNextTerm(input4);
nextWord3 <- PredNextTerm(input3);
nextWord2 <- PredNextTerm(input2);
nextWord1 <- PredNextTerm(inStr1);
nextWord4
nextWord3
nextWord2
nextWord1
# The predicted next word
nextSingleWord4 <- word(nextWord4[1,1], -1);
nextSingleWord3 <- word(nextWord3[1,1], -1);
nextSingleWord2 <- word(nextWord2[1,1], -1);
nextSingleWord1 <- word(nextWord1[1,1], -1);
nextSingleWord4
nextSingleWord3
nextSingleWord2
nextSingleWord1
nextSingleWord1
nextWord1 <- PredNextTerm(inStr1);
input4 <- "i am a boy"
input3 <- "thanks for the"
input2 <- "thanks for"
input1 <- "thanks"
nextWord4 <- PredNextTerm(input4);
nextWord3 <- PredNextTerm(input3);
nextWord2 <- PredNextTerm(input2);
nextWord1 <- PredNextTerm(inStr1);
setwd("C:\\Users\\Lee\\Documents\\R\\10. Captstone\\FinalProjectCapstone")
suppressWarnings(library(tm))
suppressWarnings(library(stringr))
suppressWarnings(library(shiny))
load(".\\CleanData\\df_tdm_1.RData")
load(".\\CleanData\\df_tdm_2.RData")
load(".\\CleanData\\df_tdm_3.RData")
load(".\\CleanData\\df_tdm_4.RData")
source("CleanInputString.R")
source("PredNextTerm.R")
#String for testing the code
input4 <- "i am a boy"
input3 <- "thanks for the"
input2 <- "thanks for"
input1 <- "thanks"
nextWord4 <- PredNextTerm(input4);
nextWord3 <- PredNextTerm(input3);
nextWord2 <- PredNextTerm(input2);
nextWord1 <- PredNextTerm(input1);
nextWord4
nextWord3
nextWord2
nextWord1
# The predicted next word
nextSingleWord4 <- word(nextWord4[1,1], -1);
nextSingleWord3 <- word(nextWord3[1,1], -1);
nextSingleWord2 <- word(nextWord2[1,1], -1);
nextSingleWord1 <- word(nextWord1[1,1], -1);
nextSingleWord4
nextSingleWord3
nextSingleWord2
nextSingleWord1
input1 <- "i"
nextWord4 <- PredNextTerm(input4);
setwd("C:\\Users\\Lee\\Documents\\R\\10. Captstone\\FinalProjectCapstone")
suppressWarnings(library(tm))
suppressWarnings(library(stringr))
suppressWarnings(library(shiny))
load(".\\CleanData\\df_tdm_1.RData")
load(".\\CleanData\\df_tdm_2.RData")
load(".\\CleanData\\df_tdm_3.RData")
load(".\\CleanData\\df_tdm_4.RData")
source("CleanInputString.R")
source("PredNextTerm.R")
#String for testing the code
input4 <- "i am a boy"
input3 <- "i am a"
input2 <- "i am"
input1 <- "i"
nextWord4 <- PredNextTerm(input4);
nextWord3 <- PredNextTerm(input3);
nextWord2 <- PredNextTerm(input2);
nextWord1 <- PredNextTerm(input1);
nextWord4
nextWord3
nextWord2
nextWord1
# The predicted next word
nextSingleWord4 <- word(nextWord4[1,1], -1);
nextSingleWord3 <- word(nextWord3[1,1], -1);
nextSingleWord2 <- word(nextWord2[1,1], -1);
nextSingleWord1 <- word(nextWord1[1,1], -1);
nextSingleWord4
nextSingleWord3
nextSingleWord2
nextSingleWord1
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
nextWord3
nextWord4
class(nextWord4)
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
nextWord4
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
nextWord2
nextWord4
nextWord4[1,1]
nextWord4[1,2]
nextWord1
nextWord4[1,2]
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
setwd("C:\\Users\\Lee\\Documents\\R\\10. Captstone\\FinalProjectCapstone")
suppressWarnings(library(tm))
suppressWarnings(library(stringr))
suppressWarnings(library(shiny))
load(".\\CleanData\\df_tdm_1.RData")
load(".\\CleanData\\df_tdm_2.RData")
load(".\\CleanData\\df_tdm_3.RData")
load(".\\CleanData\\df_tdm_4.RData")
source("CleanInputString.R")
source("PredNextTerm.R")
#String for testing the code
input4 <- "i am a boy"
input3 <- "i am a"
input2 <- "i am"
input1 <- "i"
nextWord4 <- PredNextTerm(input4);
nextWord3 <- PredNextTerm(input3);
nextWord2 <- PredNextTerm(input2);
nextWord1 <- PredNextTerm(input1);
nextWord4
nextWord3
nextWord2
nextWord1
# The predicted next word
nextSingleWord4 <- word(nextWord4[1,1], -1);
nextSingleWord3 <- word(nextWord3[1,1], -1);
nextSingleWord2 <- word(nextWord2[1,1], -1);
nextSingleWord1 <- word(nextWord1[1,1], -1);
nextSingleWord4
nextSingleWord3
nextSingleWord2
nextSingleWord1
inStr <- "i am a boy"
# Clean up the input string and extract only the words with no leading and trailing white spaces
inStr <- CleanInputString(inStr);
# Split the input string across white spaces and then extract the length
inStr <- unlist(strsplit(inStr, split=" "));
inStrLen <- length(inStr);
nxtTermFound <- FALSE;
predNxtTerm <- as.character(NULL);
if (inStrLen >= 3 & !nxtTermFound)
{
# Assemble the terms of the input string separated by one white space each
inStr1 <- paste(inStr[(inStrLen-2):inStrLen], collapse=" ");
# Subset the Four Gram data frame
searchStr <- paste("^",inStr1, sep = "");
fDF4Temp <- fDF4[grep (searchStr, fDF4$terms), ];
# Check to see if any matching record returned
if ( length(fDF4Temp[, 1]) > 1 )
{
predNxtTerm <- fDF4Temp[1,1];
nxtTermFound <- TRUE;
mesg <<- "Next word is predicted using 4-gram."
}
fDF4Temp <- NULL;
}
mesg
inStr <- "i am a boy"
inStr <- CleanInputString(inStr);
inStr <- unlist(strsplit(inStr, split=" "));
inStrLen
nxtTermFound <- FALSE;
predNxtTerm <- as.character(NULL);
inStr1 <- paste(inStr[(inStrLen-2):inStrLen], collapse=" ");
searchStr <- paste("^",inStr1, sep = "");
fDF4Temp <- fDF4[grep (searchStr, fDF4$terms), ];
fDF4Temp
if ( length(fDF4Temp[, 1]) > 1 )
{
predNxtTerm <- fDF4Temp[1,1];
nxtTermFound <- TRUE;
mesg <<- "Next word is predicted using 4-gram."
}
mesg
fDF4Temp
inStr <- "i am a"
# Clean up the input string and extract only the words with no leading and trailing white spaces
inStr <- CleanInputString(inStr);
# Split the input string across white spaces and then extract the length
inStr <- unlist(strsplit(inStr, split=" "));
inStrLen <- length(inStr);
nxtTermFound <- FALSE;
predNxtTerm <- as.character(NULL);
if (inStrLen >= 3 & !nxtTermFound)
{
# Assemble the terms of the input string separated by one white space each
inStr1 <- paste(inStr[(inStrLen-2):inStrLen], collapse=" ");
# Subset the Four Gram data frame
searchStr <- paste("^",inStr1, sep = "");
fDF4Temp <- fDF4[grep (searchStr, fDF4$terms), ];
# Check to see if any matching record returned
if ( length(fDF4Temp[, 1]) > 1 )
{
predNxtTerm <- fDF4Temp[1,1];
nxtTermFound <- TRUE;
mesg <<- "Next word is predicted using 4-gram."
}
fDF4Temp <- NULL;
}
mesg
fDF4Temp
predNxtTerm
fDF4Temp
inStr <- "i am a"
# Clean up the input string and extract only the words with no leading and trailing white spaces
inStr <- CleanInputString(inStr);
# Split the input string across white spaces and then extract the length
inStr <- unlist(strsplit(inStr, split=" "));
inStrLen <- length(inStr);
nxtTermFound <- FALSE;
predNxtTerm <- as.character(NULL);
nxtTermFound
inStrLen
inStr1 <- paste(inStr[(inStrLen-2):inStrLen], collapse=" ");
inStr1
searchStr <- paste("^",inStr1, sep = "");
searchStr
fDF4Temp <- fDF4[grep (searchStr, fDF4$terms), ];
fDF4Temp
searchStr
fDF4Temp <- fDF4[grep (searchStr, fDF4$terms), ];
fDF4Temp
inStr <- "i am a "
inStr <- CleanInputString(inStr);
inStr
inStr <- unlist(strsplit(inStr, split=" "));
inStr <- unlist(strsplit(inStr, split=" "));
inStr
inStrLen
nxtTermFound
predNxtTerm
inStr1 <- paste(inStr[(inStrLen-2):inStrLen], collapse=" ");
inStr1
searchStr <- paste("^",inStr1, sep = "");
fDF4Temp <- fDF4[grep (searchStr, fDF4$terms), ];
fDF4Temp
inStr <- "i am a "
= "");
searchStr
inStr <- "i am a "
inStr
searchStr <- paste("^",inStr1, sep = "");
searchStr
inStr <- "i am a "
searchStr <- paste("^",inStr1);
searchStr
inStr <- "i am a"
searchStr <- paste("^",inStr1, sep = "", " ");
searchStr
fDF4Temp <- fDF4[grep (searchStr, fDF4$terms), ];
fDF4Temp
searchStr <- paste("^",inStr1, sep = "", " ");
searchStr
fDF4Temp
fDF4Temp
fDF1$terms[1]
<- fDF1$terms[1];
fDF1
dfFinal <-head(fDF1)
dfFinal
dfFinal
shiny::runApp('WordPredictionApp')
dfFinal
dfFinal <- data.frame()
dfFinal
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
dfFinal
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('~/R/ShinyWebApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('~/R/ShinyWebApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
dfFinal <- data.frame()
dfFinal
dfFinal <- data.frame(colnames("Terms","Frequency"))
dfFinal <- data.frame(Terms=NA, Frequency=NA)[numeric(0), ]
shiny::runApp('WordPredictionApp')
dfFinal <- data.frame(Terms=NA, Frequency=NA)[numeric(0), ]
dfFinal
dfFinal <- data.frame(Terms=NA, Frequency=NA)[numeric(0), ]
Nrow(dfFinal)
nRow(dfFinal)
nrow(dfFinal)
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
shiny::runApp('WordPredictionApp')
